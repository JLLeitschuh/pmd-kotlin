options {
}

PARSER_BEGIN(KotlinParser)
import net.sourceforge.pmd.lang.ast.*;

public class KotlinParser {

public static void main(String[] args) {
        try {
            new KotlinParser(new java.io.StringReader(args[0])).KotlinFile();
            System.out.println("Syntax is okay");
        } catch (Throwable e) {
            // Catching Throwable is ugly but JavaCC throws Error objects!
            System.out.println("Syntax check failed: " + e.getMessage());
        }
    }
}
PARSER_END(KotlinParser)

/* WHITESPACE */
SPECIAL_TOKEN :
{
  " " | "\t" | "\n" | "\r" | "\f"
}

/* COMMENTS */
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "//"(~["\n","\r"])* ("\n"|"\r"|"\r\n")? >
}

MORE :
{
  "/*" : IN_MULTI_LINE_COMMENT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/* NUMBER LITERALS */
TOKEN :
{
  < #DIGIT: ["0"-"9"]>
| < #BINARY_DIGIT: ["0"-"1"]>
| < #HEXADECIMAL_DIGIT: <DIGIT> | ["a"-"f", "A"-"F"]>

| < INTEGER_LITERAL: (<DIGIT>)+>
| < BINARY_LITERAL: "0"["b", "B"](<BINARY_DIGIT>)+>
| < HEXADECIMAL_LITERAL: "0"["x", "X"](<HEXADECIMAL_DIGIT>)+>

| < #SIGN: ["-", "+"]>
| < #SIGNED_INTEGER: (<SIGN>)?<INTEGER_LITERAL>>

| < FLOAT_LITERAL: <INTEGER_LITERAL>("."<INTEGER_LITERAL>)?(["e", "E"]<SIGNED_INTEGER>)?(["f", "F"])?>
}

/* CHARACTER AND STRING LITERALS */
TOKEN :
{
  < #SINGLE_CHARACTER: ~["'","\\","\n","\r"]>
| < #UNICODE_ESCAPE: "\\u" <HEXADECIMAL_DIGIT><HEXADECIMAL_DIGIT><HEXADECIMAL_DIGIT><HEXADECIMAL_DIGIT>>
| < #ESCAPE_SEQUENCE: ("\\"["b", "t", "n", "f", "r", "\"", "'", "\\"]) | <UNICODE_ESCAPE>>
| < CHARACTER_LITERAL: "'"(<SINGLE_CHARACTER>|<ESCAPE_SEQUENCE>)"'">

| < #STRING_CHARACTER: (~["\"","\\","\n","\r"]) | <ESCAPE_SEQUENCE>>
| < #STRING_CHARACTERS: (<STRING_CHARACTER>)+>
| < STRING_LITERAL: "\""(<STRING_CHARACTERS>)?"\"">
}


TOKEN :
{
  <SEMI: ";" | ["\n", "\r"] | "\r\n">
}

/* KEYWORDS */
TOKEN :
{
  <PACKAGE: "package" >
| <AS: "as">
| <TYPE: "type">
| <CLASS: "class">
| <THIS: "this">
| <VAL: "val">
| <VAR: "var">
| <FUN: "fun">
| <EXTENSION: "extension">
| <FOR: "for">
| <NULL: "null">
| <TYPEOF: "typeof">
| <NEW: "new">
| <TRUE: "true">
| <FALSE: "false">
| <IS: "is">
| <IN: "in">
| <THROW: "throw">
| <RETURN: "return">
| <BREAK: "break">
| <CONTINUE: "continue">
| <OBJECT: "object">
| <IF: "if">
| <ELSE: "else">
| <WHILE: "while">
| <DO: "do">
| <WHEN: "when">
| <OUT: "out">
| <REF: "ref">
| <TRY: "try">
| <WHERE: "where">
| <BY: "by">
| <GET: "get">
| <SET: "set">
| <IMPORT: "import">
| <FINAL: "final">
| <ABSTRACT: "abstract">
| <ENUM: "enum">
| <OPEN: "open">
| <ANNOTATION: "annotation">
| <OVERRIDE: "override">
| <PRIVATE: "private">
| <PUBLIC: "public">
| <INTERNAL: "internal">
| <PROTECTED: "protected">
| <CATCH: "catch">
| <FINALLY: "finally">
}

/* IDENTIFIERS */
TOKEN :
{
  <SIMPLE_NAME: (["a"-"z", "A"-"Z"])+> // TODO
}